@page "/document-types"
@using Microsoft.AspNetCore.WebUtilities
@using System.Net
@using System.Net.Http.Headers
@using WebApp.Components.Dialogs
@using WebApp.Constant
@attribute [Authorize]
@layout AdminMainLayout

<SfBreadcrumb>
    <BreadcrumbItems>
        <BreadcrumbItem Text="BreadCrumbAdmin" Url="/admin" />
        <BreadcrumbItem Text="BreadCrumbDocumentType" Url="/admin/document-types" />
    </BreadcrumbItems>
</SfBreadcrumb>

<PageTitle>Documents Type</PageTitle>

@if (!_loaded)
{
    <LoadingBackground>
    </LoadingBackground>
}
else
{

    <SfGrid DataSource="@documentTypes" Toolbar="@(new List<string>() { "Add" })" AllowPaging="true">
        <GridEditSettings AllowAdding="true" AllowEditing="true"></GridEditSettings>

        <GridPageSettings CurrentPage="@pageIndex" PageSize="@pageSize" EnableQueryString="true" PageSizes="@TablePageConstant.RowPerPage"></GridPageSettings>
        <GridEvents PageChanging="PageChangingHandler" OnLoad="LoadHandler" TValue="DocumentsTypes"></GridEvents>

        <GridColumns>
            @*             <GridColumn HeaderText="Actions" IsFrozen="true" Freeze="FreezeDirection.Left" TextAlign="TextAlign.Left" Width="100"></GridColumn>
 *@            <GridColumn Field=@nameof(DocumentsTypes.Name) HeaderText="Name" IsFrozen="true" Freeze="FreezeDirection.Left" TextAlign="TextAlign.Center" Width="100"></GridColumn>
            <GridColumn Field=@nameof(DocumentsTypes.Description) HeaderText="Description" IsFrozen="true" Freeze="FreezeDirection.Left" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field=@nameof(DocumentsTypes.LinkUrl) HeaderText="LinkUrl" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field=@nameof(DocumentsTypes.IsActive) HeaderText="Active" TextAlign="TextAlign.Center" DisplayAsCheckBox="true"> </GridColumn>
        </GridColumns>
    </SfGrid>
}

<SfDialog @bind-Visible="@isDialogVisible" Width="500px" Header="Add Document Type">
    <DialogTemplates>
        <Content>
            <EditForm Model="@newDocumentType" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="Name">Name</label>
                    <InputText id="Name" class="form-control" @bind-Value="newDocumentType.Name" />
                </div>
                <div class="form-group">
                    <label for="Description">Description</label>
                    <InputText id="Description" class="form-control" @bind-Value="newDocumentType.Description" />
                </div>
                <div class="form-group">
                    <label for="LinkUrl">Link URL</label>
                    <InputText id="LinkUrl" class="form-control" @bind-Value="newDocumentType.LinkUrl" />
                    <label for="FileActive">Active File</label>
                    <SfSwitch @bind-Checked="newDocumentType.FileActive" OnLabel="Active" OffLabel="Deactive"></SfSwitch>

                </div>
                <div class="form-group">
                    <label for="IsActive">Active</label>
                    @*                     <InputCheckbox id="IsActive" class="form-control" @bind-Value="newDocumentType.IsActive" />
*@               
                       <SfSwitch @bind-Checked="newDocumentType.IsActive" OnLabel="Active" OffLabel="Deactive"></SfSwitch>
                </div>
                <div class="form-group">
                    <label for="File">File</label>
                    <InputFile id="File" OnChange="HandleFileSelected" />
                </div>

                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </Content>
    </DialogTemplates>
</SfDialog>
@code {

    [Inject] FileApiClient apiClient { get; set; }
    [Inject] protected IStringLocalizer<Localizer.Global> L { get; set; }
    private DocumentsTypes newDocumentType = new DocumentsTypes();
    private IBrowserFile selectedFile;
    private bool isDialogVisible = false;

    private bool _loaded = false;

    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }

    public int pageSize { get; set; } = 10;

    public int pageIndex { get; set; } = 1;

    protected int totalItemsCount { get; set; } = 0;

    protected List<DocumentsTypes> documentTypes { get; set; }

    private bool _canCreateUsers = true;
    private bool _canSearchUsers = true;
    private bool _canExportUsers = true;
    private bool _canViewRoles = true;
    private bool _canDeleteRoles = true;
    private bool _canUpdateRoles = true;

    public string _searchString;

    public void OnActionBegin(ActionEventArgs<DocumentsTypes> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        {
            isDialogVisible = true;
            args.Cancel = true;
        }
    }

    private async Task HandleValidSubmit()
    {
        var response = await apiClient.CreateDocumentType(selectedFile, newDocumentType.Name, newDocumentType.Description, newDocumentType.IsActive);
        if (response.IsSuccessStatusCode)
        {
            // newDocumentType.LinkUrl = response.Result;
            documentTypes.Add(newDocumentType);
            isDialogVisible = false;
            StateHasChanged();
        }
        else
        {
            // Handle error
        }
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            var user = (await authenticationStateTask).User;

            var uri = _navigationManager.ToAbsoluteUri(_navigationManager.Uri);

            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("pageSize", out var pageSizeData))
            {
                pageSize = Convert.ToInt16(pageSizeData.First());
            }

            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("pageIndex", out var pageIndexData))
            {
                pageIndex = Convert.ToInt16(pageIndexData.First());
            }

            await LoadDocumentType();
        }
        finally
        {
            _loaded = true;
        }
        ;
    }

    protected async Task LoadDocumentType()
    {
        try
        {
            // _loaded = false;

            var result = await apiClient.GetDocumentType(pageSize, pageIndex, "");
            documentTypes = result.Result;
            totalItemsCount = (int)result.Count;

            // viewNotifier.Show($"{result.Result.Count} items found", ViewNotifierType.Success, L["Operation Successful"]);
        }
        catch (Exception ex)
        {
            // viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
        finally
        {
            _loaded = true;
        }
    }

    public async void PageChangingHandler(GridPageChangingEventArgs args)
    {
        await OnPage(args.CurrentPage, args.CurrentPageSize);
    }

    public async void LoadHandler(object args)
    {
        await OnPage(pageIndex, pageSize);
    }

    // private async Task<TableData<UserDataViewModel>> ServerReload(TableState state, CancellationToken cancellationToken)
    // {

    //     return new TableData<UserDataViewModel>() { TotalItems = totalItemsCount, Items = users };

    // }

    protected async Task OnPage(int index, int size)
    {
        pageSize = size;
        pageIndex = index;

        await LoadDocumentType();
    }

    private void ViewProfile(string userId)
    {
        _navigationManager.NavigateTo($"/admin/user-profile/{userId}");
    }


    private async Task ExportToExcel()
    {
        // var base64 = await _userManager.ExportToExcelAsync(_searchString);
        // await _jsRuntime.InvokeVoidAsync("Download", new
        // {
        //     ByteArray = base64,
        //     FileName = $"{nameof(Users).ToLower()}_{DateTime.Now:ddMMyyyyHHmmss}.xlsx",
        //     MimeType = ApplicationConstants.MimeTypes.OpenXml
        // });
        // _snackBar.Add(string.IsNullOrWhiteSpace(_searchString)
        //     ? _localizer["Users exported"]
        //     : _localizer["Filtered Users exported"], Severity.Success);
    }
}
