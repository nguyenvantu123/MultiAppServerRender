@page "/document-types"
@using Microsoft.AspNetCore.WebUtilities
@using System.Net
@using System.Net.Http.Headers
@using WebApp.Components.Dialogs
@using WebApp.Constant
@using Syncfusion.Blazor.Grids

@attribute [Authorize]
@layout AdminMainLayout

<SfBreadcrumb>
    <BreadcrumbItems>
        <BreadcrumbItem Text="BreadCrumbAdmin" Url="/dashboard" />
        <BreadcrumbItem Text="BreadCrumbDocumentType" Url="/admin/document-types" />
    </BreadcrumbItems>
</SfBreadcrumb>

<PageTitle>Documents Type</PageTitle>

@if (!_loaded)
{
    <LoadingBackground>
    </LoadingBackground>
}
else
{

    <SfGrid DataSource="@documentTypes" Toolbar="@(new List<string>() { "Add" })" AllowPaging="true">
        <GridEditSettings AllowAdding="true" AllowEditing="true"></GridEditSettings>

        <GridPageSettings CurrentPage="@pageIndex" PageSize="@pageSize" EnableQueryString="true" PageSizes="@TablePageConstant.RowPerPage"></GridPageSettings>
        <GridEvents OnActionBegin="OnActionBegin" PageChanging="PageChangingHandler" OnLoad="LoadHandler" TValue="DocumentsTypes"></GridEvents>

        <GridColumns>
            <GridColumn Field=@nameof(DocumentsTypes.Name) HeaderText="Name" IsFrozen="true" Freeze="FreezeDirection.Left" TextAlign="TextAlign.Center" Width="100"></GridColumn>
            <GridColumn Field=@nameof(DocumentsTypes.Description) HeaderText="Description" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field=@nameof(DocumentsTypes.LinkUrl) HeaderText="LinkUrl" TextAlign="TextAlign.Center" IsFrozen="true" Freeze="FreezeDirection.Left"></GridColumn>
            <GridColumn HeaderText="Active" TextAlign="TextAlign.Center" Width="100">
                <Template>
                    <SfSwitch @bind-Checked="((DocumentsTypes)context).IsActive" Disabled="true"></SfSwitch>
                </Template>
            </GridColumn>

            <GridColumn Field=@nameof(DocumentsTypes.InsertedBy) AllowEditing="false"  HeaderText="InsertedBy" TextAlign="TextAlign.Center"></GridColumn>
            <GridColumn Field=@nameof(DocumentsTypes.InsertedAt) HeaderText="InsertedAt" TextAlign="TextAlign.Center" AllowEditing="false"></GridColumn>

            <GridColumn Field=@nameof(DocumentsTypes.UpdatedBy) HeaderText="UpdatedBy" TextAlign="TextAlign.Center" AllowEditing="false"></GridColumn>
            <GridColumn Field=@nameof(DocumentsTypes.UpdatedAt) HeaderText="UpdatedAt" TextAlign="TextAlign.Center" AllowEditing="false"></GridColumn>
        </GridColumns>
    </SfGrid>
}

<SfDialog @bind-Visible="@isDialogVisible" Width="600px" Header="Add Document Type" ShowCloseIcon="true" IsModal="true" AnimationSettings="@(new DialogAnimationSettings { Effect = DialogEffect.Zoom })">
    <DialogTemplates>
        <Content>
            <EditForm Model="@newDocumentType">
                <DataAnnotationsValidator />
                @*                 <ValidationSummary />
                *@
                <div class="p-3">
                    <div class="mb-3">
                        <label for="Name" class="form-label">Name</label>
                        <InputText id="Name" class="form-control" @bind-Value="newDocumentType.Name" />
                    </div>

                    <div class="mb-3">
                        <label for="Description" class="form-label">Description</label>
                        <InputText id="Description" class="form-control" @bind-Value="newDocumentType.Description" />
                    </div>

                    <div class="mb-3">
                        <label for="File" class="form-label">File</label>
                        <SfUploader @ref="uploader" AutoUpload="true" AllowedExtensions=".doc, .docx" AllowMultiple="false">
                            <UploaderTemplates>
                                <Template Context="uploadContext">
                                    @if (!string.IsNullOrEmpty(fileName))
                                    {

                                        <div class="name file-name" title="@uploadContext.Name">@uploadContext.Name</div>
                                        <div class="file-size">@fileSize</div>
                                        <span class="e-icons e-file-remove-btn" id="removeIcon" title="Remove" @onclick="@onFileRemove"></span>
                                    }
                                </Template>
                            </UploaderTemplates>
                            <UploaderEvents ValueChange="OnChange"></UploaderEvents>
                        </SfUploader>
                    </div>


                    <div class="mb-3">
                        <label for="IsActive" class="form-label">Active</label>
                        <div class="d-flex flex-column align-items-start">
                            <SfSwitch id="IsActive" @bind-Checked="newDocumentType.IsActive" CssClass="custom-switch"></SfSwitch>
                        </div>
                    </div>

                    <div class="d-flex justify-content-end">
                        <button type="button" class="btn btn-secondary me-2" @onclick="() => isDialogVisible = false">Cancel</button>
                        <SfProgressButton Type="submit" IsPrimary="true" Content="Save" OnClick="@HandleValidSubmit">
                            <ProgressButtonSpinSettings Position="SpinPosition.Right" Width="20">
                                <SpinTemplate>
                                    <div class="template"></div>
                                </SpinTemplate>
                            </ProgressButtonSpinSettings>
                        </SfProgressButton>
                    </div>
                </div>
            </EditForm>
        </Content>
    </DialogTemplates>
</SfDialog>

@code {

    [Inject] FileApiClient apiClient { get; set; }
    [Inject] protected IStringLocalizer<Localizer.Global> L { get; set; }
    private DocumentsTypes newDocumentType = new DocumentsTypes();
    private SfUploader uploader;
    private bool isDialogVisible = false;
    private string fileSize { get; set; }
    private string fileName { get; set; }
    private bool _loaded = false;

    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }

    public int pageSize { get; set; } = 10;

    public int pageIndex { get; set; } = 1;

    protected int totalItemsCount { get; set; } = 0;

    public class UploadFiles
    {
        public string Name { get; set; }
        public double Size { get; set; }
        public string Type { get; set; }
        public IBrowserFile File { get; set; }
    }

    public class CustomBrowserFile : IBrowserFile
    {
        private readonly Stream _stream;

        public CustomBrowserFile(string name, string contentType, long size, Stream stream)
        {
            Name = name;
            ContentType = contentType;
            Size = size;
            _stream = stream;
        }

        public string Name { get; }
        public DateTimeOffset LastModified => DateTimeOffset.Now;
        public long Size { get; }
        public string ContentType { get; }

        public Stream OpenReadStream(long maxAllowedSize = 512000, CancellationToken cancellationToken = default)
        {
            return _stream;
        }
    }

    protected List<DocumentsTypes> documentTypes { get; set; }
    private IBrowserFile? selectedFile;

    private bool _canCreateUsers = true;
    private bool _canSearchUsers = true;
    private bool _canExportUsers = true;
    private bool _canViewRoles = true;
    private bool _canDeleteRoles = true;
    private bool _canUpdateRoles = true;

    public string _searchString;

    public void OnActionBegin(ActionEventArgs<DocumentsTypes> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        {
            isDialogVisible = true;
            args.Cancel = true;
        }
    }

    private async Task HandleValidSubmit()
    {
        if (selectedFile != null)
        {
            var response = await apiClient.CreateDocumentType(selectedFile, newDocumentType.Name, newDocumentType.Description, newDocumentType.IsActive);
            if (response.IsSuccessStatusCode)
            {
                documentTypes.Add(newDocumentType);
                isDialogVisible = false;
                StateHasChanged();
            }
            else
            {
                // Handle error
            }
        }
    }

    private async Task OnChange(UploadChangeEventArgs args)
    {
        foreach (var file in args.Files)
        {
            selectedFile = file.File;
            fileName = file.FileInfo.Name;
            fileSize = await uploader.BytesToSizeAsync(file.FileInfo.Size);
        }
    }

    private async Task onFileRemove()
    {
        await uploader.RemoveAsync();
        selectedFile = null;
        fileSize = string.Empty;
        fileName = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var user = (await authenticationStateTask).User;

            var uri = _navigationManager.ToAbsoluteUri(_navigationManager.Uri);

            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("pageSize", out var pageSizeData))
            {
                pageSize = Convert.ToInt16(pageSizeData.First());
            }

            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("pageIndex", out var pageIndexData))
            {
                pageIndex = Convert.ToInt16(pageIndexData.First());
            }

            await LoadDocumentType();
        }
        finally
        {
            _loaded = true;
        }
        ;
    }

    protected async Task LoadDocumentType()
    {
        try
        {
            // _loaded = false;

            var result = await apiClient.GetDocumentType(pageSize, pageIndex, "");
            documentTypes = result.Result;
            totalItemsCount = (int)result.Count;

            // viewNotifier.Show($"{result.Result.Count} items found", ViewNotifierType.Success, L["Operation Successful"]);
        }
        catch (Exception ex)
        {
            // viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
        finally
        {
            _loaded = true;
        }
    }

    public async void PageChangingHandler(GridPageChangingEventArgs args)
    {
        await OnPage(args.CurrentPage, args.CurrentPageSize);
    }

    public async void LoadHandler(object args)
    {
        await OnPage(pageIndex, pageSize);
    }

    // private async Task<TableData<UserDataViewModel>> ServerReload(TableState state, CancellationToken cancellationToken)
    // {

    //     return new TableData<UserDataViewModel>() { TotalItems = totalItemsCount, Items = users };

    // }

    protected async Task OnPage(int index, int size)
    {
        pageSize = size;
        pageIndex = index;

        await LoadDocumentType();
    }

    private void ViewProfile(string userId)
    {
        _navigationManager.NavigateTo($"/admin/user-profile/{userId}");
    }


    private async Task ExportToExcel()
    {
        // var base64 = await _userManager.ExportToExcelAsync(_searchString);
        // await _jsRuntime.InvokeVoidAsync("Download", new
        // {
        //     ByteArray = base64,
        //     FileName = $"{nameof(Users).ToLower()}_{DateTime.Now:ddMMyyyyHHmmss}.xlsx",
        //     MimeType = ApplicationConstants.MimeTypes.OpenXml
        // });
        // _snackBar.Add(string.IsNullOrWhiteSpace(_searchString)
        //     ? _localizer["Users exported"]
        //     : _localizer["Filtered Users exported"], Severity.Success);
    }
}

<style>
    .template {
        border: 2px solid green;
        border-style: dotted;
        border-radius: 50%;
        border-top-color: transparent;
        border-bottom-color: transparent;
        height: 16px;
        width: 16px;
    }

    .template {
        -webkit-animation: custom-rolling 2s linear infinite;
        animation: custom-rolling 2s linear infinite;
    }
</style>